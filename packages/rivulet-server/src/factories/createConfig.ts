import Config from '../../typings/config';
import fs from 'fs-extra';
import settingsDir from '../global/settingsDir';
import path from 'path';
import json, { JFReadOptions, JFWriteOptions, Path } from 'jsonfile';
import util from 'util';
import uuid from 'uuid/v4';
import { warn } from '../services/log';
import chalk from 'chalk';
import { genSalt } from 'bcrypt';

const readFile = util.promisify<Path, JFReadOptions, Config>(json.readFile);
const writeFile = util.promisify<Path, Config, JFWriteOptions>(json.writeFile);

export default async (): Promise<Config> => {
    const configPath = path.join(settingsDir, 'config.json');
    if (!await fs.pathExists(configPath)) {
        fs.writeJSON(configPath, {});
    }

    const config = await readFile(configPath, {});
    if (!config.secretKey) {
        config.secretKey = uuid();
        config.salt = await genSalt();

        warn(chalk`Autogenerated a file with randomized keys and salts for you.\r\n{dim If you wish to {bold harden your security}, please update the file configuration file at {cyan ${configPath}} yourself!}`);

        await writeFile(configPath, config, {});
    }

    return config;
}